#!/usr/bin/python
# Upgrades:
# 1) Would be nice to be able to restart a backup.  Is this possible?
# 2) Why on earth does it take so long, even for stuff that's already there?
#    read up on rsync
# 3) Better handling of stderr.  Spawn two threads to read it
#    separately?  Or maybe I don't really need popen2 at all, if I
#    want output to just inherit stdout and stderr

import re

base=4

default_destination = r'/Volumes/My Passport/'

rsync_command = "rsync"
rsync_options="--verbose --progress --archive --exclude-from=-"

config = dict(
    thalia = dict(source='/Users/novak/',
                             destination=default_destination,
                  exclude=
"""
/.Trash
/Music
/Desktop/Orig-In
/Desktop/In-euterpe
"""),

    demeter = dict(source='/Users/',
                             destination=default_destination,
                             exclude=
"""/novak/.Trash 
/novak/Library/Caches
/novak/.backup
/novak/Pictures
/novak/Music
/novak/Sites/Catalog
/novak/Sites/Plots
/novak/Projects/Thesis
/novak/Desktop/Audio
/novak/Desktop/vtk
/novak/Desktop/lush
/orlith/.Trash
/orlith/Library/Caches
/test/.Trash
/test/Library/Caches
"""),

              dionysus= dict(source='dionysus:/home/',
                             destination=default_destination,
                             exclude=
"""/novak/.Trash
/novak/bin/build
/novak/bin/build-rpm
/novak/bin/build-fink
/novak/bin/build-ubuntu
/novak/waiting-to-delete
/novak/.python23_compiled
/novak/.python24_compiled
/novak/.python25_compiled
/novak/Projects/Thesis/big-endian-data
/novak/Projects/Thesis/little-endian-data
/novak/Projects/Thesis/data
/novak/Projects/Thesis/Plots-old
/novak/Projects/Thesis/old-stuff/Plots-07-29-05
/novak/Projects/Thesis/Avishai-data
/novak/Projects/Thesis/rudd
/david/SPECTRUM
/novak/Desktop/ubuntu
"""),

              dionysus_etc= dict(source='root@dionysus:/etc/',
                                 destination=default_destination,
                                 exclude=""),
              
              euterpe = dict(source='/Users/',
                             destination=default_destination,
                             exclude=
"""; The /Users is implicit
/novak/.Trash
/novak/bin/build
/novak/Library/Caches
/novak/.python23_compiled
/novak/.python24_compiled
/novak/Music
/novak/Projects/Thesis/Plots
/novak/Projects/Thesis/data
/novak/Projects/Thesis/tag-jail
/novak/Projects/Thesis/jail
/novak/Projects/Thesis/old-plots
/novak/Projects/Thesis/Sbc201a10x-n4
/novak/Projects/Thesis/old-junk
/novak/Projects/Lisp/netflix
"""),

              jen = dict(source='/Users/',
                         destination=default_destination,
                         exclude=
"""/Shared/GarageBand Demo Songs
/jen/Documents/installers
/jen/.Trash
/jen/Library/Caches
/novak/.Trash
/novak/bin/build
/novak/Library/Caches
"""),

              usb_key = dict(source='/Volumes/USB-Disk/',
                             destination=default_destination,
                             exclude=
"""
/.Trashes
"""),

              web = dict(source='jenandgreg@jenandgreg.org:/home/jenandgreg/',
                         destination=default_destination,
                         exclude=
"""
/.cpan
/.wusage
"""),

              web_www = dict(source='jenandgreg@jenandgreg.org:/home/jenandgreg/www/',
                             destination=default_destination,
                             rsync_options = '--copy-links',
                             exclude=""),

              web_sql = dict(source='jenandgreg@jenandgreg.org:/var/lib/mysql/weddingwikidb/',
                             destination=default_destination,
                             exclude=""),)

import sys
import threading
import os
             
def main():
    system = sys.argv[1]
    
    backup(system)
    prune_backup_series(system)
    
def backup(system):
    starting_dir = os.getcwd()    
    os.chdir(system['destination'])
    
    last_fn = get_last_filename(system)
    next_fn = get_next_filename(system)
    source = config[system]['source']
    # 'echo ' + ' ' + \

    options = rsync_options

    if config[system].has_key('rsync_options'):
        options = options  + ' ' + config[system]['rsync_options']
    
    command = rsync_command + ' ' + \
              options + ' ' + \
              '--link-dest=../' + last_fn + ' ' + \
              source + ' ' + \
              next_fn

    inf, outf = os.popen2(command)

    inf.write(config[system]['exclude'])
    inf.close()
    
    for line in outf:
        print line, 
    outf.close()
    
    os.chdir(starting_dir)

def largest_exponent(n):
    """Return largest i such that base**i is less than n"""
    assert n >= 0
    
    # handle zero as special case
    if n==0: return 0

    i=0
    while base**i <= n:
        i += 1
    return i-1

def keep_numbers(n):
    "Return a list of backup numbers to keep, given current number n"

    # handle 0 as a special case
    result = [ [i for i in range(n-base+1, n+1) if i >= 0] ]

    for i in range(1, largest_exponent(n)+1):
        last_multiple = n - (n % base**i)

        result.append([i for i in range(last_multiple-base**(i+1),
                                        last_multiple, base**i)
                       if i >= 0])

    return flatten(result)

def keep_filenames(base, n):
    """return a list of filenames that should not be deleted"""
    ns = keep_numbers(n)
    return [base + "." + str(n) for n in ns]

def prune_backup_series(base):
    """Prune the current backup series"""
    n = get_last_number(base)
    keep_fns = keep_filenames(base, n)

    fns = backup_filenames(base)
    for fn in fns:
        if not fn in keep_fns:            
            print "Deleting ", fn
            os.system('rm -rf ' + fn)
            # os.removedirs(fn)
            
def backup_filenames(base):
    """Return a list of all filenames in this backup series"""
    return [f for f in os.listdir('.')
            if re.match('^%s\.[0-9]+$' % base, f)] 

def get_next_filename(base):
    """get the next filename this backup series."""
    num = get_next_number(base)
    return base + '.' + str(num)

def get_last_filename(base):
    """get the next filename this backup series."""
    num = get_last_number(base)
    return base + '.' + str(num)

def get_last_number(base):
    """get the number of the last backup in this series."""
    fns = backup_filenames(base)
    nums = [int(fn.replace(base+'.', '')) for fn in fns]

    if len(nums) is 0: return 0
    else: return max(nums)

def get_next_number(base):
    """get the number of the next backup in this series."""
    return get_last_number(base) + 1

def flatten(L):
    """Make nested lists into a single list of atoms"""
    if type(L) != type([]): return [L]
    if L == []: return L
    return reduce(lambda x,y: x+y, map(flatten, L))

    
main()
